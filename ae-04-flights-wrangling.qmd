---
title: "AE 04: NYC flights + data wrangling"
author: Gracie Carlaw
format: pdf
---

```{r}
#| label: load-packages
#| message: false

library(tidyverse)
library(nycflights13)
```

## Exercise 1

**Your turn:** Fill in the blanks:

The `flights` data frame has 336776 rows.
Each row represents a different flight.

## Exercise 2

**Your turn:** What are the names of the variables in `flights`.

```{r}
#| label: column-names
names(flights)
```

## Exercise 3 - `select()`

-   Make a data frame that only contains the variables `dep_delay` and `arr_delay`.

```{r}
#| label: select-vars

select(flights, "dep_delay", "arr_delay")
```

-   Make a data frame that keeps every variable except `dep_delay`.

```{r}
#| label: exclude-vars

select(flights, -dep_delay)
```

-   Make a data frame that includes all variables between `year` through `dep_delay` (inclusive). These are all variables that provide information about the departure of each flight.

```{r}
#| label: include-range

select(flights, year:dep_delay)
```

-   Use the `select` helper `contains()` to make a data frame that includes the variables associated with the arrival, i.e., contains the string `"arr\_"` in the name.

```{r}
#| label: arr-vars

flights %>%
select(contains("arr"))
```

## Exercise 4 - `slice()`

-   Display the first five rows of the `flights` data frame.

```{r}
#| label: slice

flights %>%
  slice_head(n = 5)
```

-   Display the last two rows of the `flights` data frame.

```{r}
#| label: last-two

flights %>%
  slice_tail(n = 2)
```

## Exercise 5 - `arrange()`

-   Let's arrange the data by departure delay, so the flights with the shortest departure delays will be at the top of the data frame.

```{r}
#| label: arrange-delays

flights %>%
  arrange(dep_delay)
```

-   Question: What does it mean for the `dep_delay` to have a negative value?

It likely means that the flight departed early. 

-   Arrange the data by descending departure delay, so the flights with the longest departure delays will be at the top.

```{r}
#| label: arrange-delays-desc

flights %>%
  arrange(desc(dep_delay))
```

-   **Your turn:** Create a data frame that only includes the plane tail number (`tailnum`), carrier (`carrier`), and departure delay for the flight with the longest departure delay. What is the plane tail number (`tailnum`) for this flight?

```{r}
#| label: longest-delay

flights %>%
  select("tailnum", "carrier") %>% 
  arrange(desc("dep_delay")) %>% 
  slice_head(n = 1)
```
The tail number for this flight is N14228. 

## Exercise 6 - `filter()`

-   Filter for all rows where the destination airport is RDU.

```{r}
#| label: rdu

flights%>%
  filter(dest == "RDU")
```

-   Filter for all rows where the destination airport is RDU and the arrival delay is less than 0.

```{r}
#| label: rdu-ontime

flights %>%
  filter(dest == "RDU" & arr_delay < 0)
```

-   **Your turn:** Describe what the code is doing in words.

The code below is finding rows (flights) within the "flights" dataset where the destination is either "RDU" or "GSO" and the arrival and deparure delays are both less than 0. 

```{r}
#| label: nc-early

flights |>
  filter(
    dest %in% c("RDU", "GSO"),
    arr_delay < 0 | dep_delay < 0
  )
```

**Hint:** Logical operators in R:

| operator      | definition                                               |
|:--------------|:---------------------------------------------------------|
| `<`           | is less than?                                            |
| `<=`          | is less than or equal to?                                |
| `>`           | is greater than?                                         |
| `>=`          | is greater than or equal to?                             |
| `==`          | is exactly equal to?                                     |
| `!=`          | is not equal to?                                         |
| `x & y`       | is x AND y?                                              |
| `x \| y`      | is x OR y?                                               |
| `is.na(x)`    | is x NA?                                                 |
| `!is.na(x)`   | is x not NA?                                             |
| `x %in% y`    | is x in y?                                               |
| `!(x %in% y)` | is x not in y?                                           |
| `!x`          | is not x? (only makes sense if `x` is `TRUE` or `FALSE`) |

## Exercise 7 - `count()`

-   Create a frequency table of the destination locations for flights from New York.

```{r}
#| label: count-dest

flights %>%
  count(origin, dest, sort = TRUE)
```

-   In which month was there the fewest number of flights? How many flights were there in that month? 

```{r}
#| label: count-month
flights %>%
  count(month, sort = TRUE)
```
The fewest flights were in February with 24951 flights. 

-   **Your turn:** On which date (month + day) was there the largest number of flights? How many flights were there on that day?

```{r}
#| label: count-date

flights %>%
  count(month, day, sort = TRUE)
```
The day with the most flights was November 27th with 1014 flights.

## Exercise 8 - `mutate()`

-   Convert `air_time` (minutes in the air) to hours and then create a new variable, `mph`, the miles per hour of the flight.

```{r}
#| label: calculate-mph

flights %>%
  mutate(air_time / 60,
    mph = distance/air_time)
```

-   **Your turn:** First, count the number of flights each month, and then calculate the proportion of flights in each month. What proportion of flights take place in July?

```{r}
#| label: months-prop

flights %>%
  count(month, sort = TRUE) %>%
  mutate(month_prop = n/sum(n)) %>%
  filter(month == 7)
  
```
The proportion of flights that take place in July is 0.08737262, or 8.73%

-   Create a new variable, `rdu_bound`, which indicates whether the flight is to RDU or not. Then, for each departure airport (`origin`), calculate what proportion of flights originating from that airport are to RDU.

```{r}
#| label: rdu-origin-prop
flights %>%
  mutate(rdu_bound = if_else(dest == "RDU", "YES", "NO")) %>%
  count(rdu_bound, origin, sort = TRUE) %>%
  filter(rdu_bound == "YES")
  
```

## Exercise 9 - `summarize()`

-   Find mean arrival delay for all flights.

```{r}
#| label: find-arrival-delay

# add code here
```

## Exercise 10 - `group_by()`

-   Find mean arrival delay for for each month.

```{r}
#| label: mean-arr-delay-month

# add code here
```

-   **Your turn:** What is the median departure delay for each airports around NYC (`origin`)? Which airport has the shortest median departure delay?

```{r}
#| label: median-dep-dely-origin

# add code here
```

# Additional Practice

Try these on your own, either in class if you finish early, or after class.

1.  Create a new dataset that only contains flights that do not have a missing departure time. Include the columns `year`, `month`, `day`, `dep_time`, `dep_delay`, and `dep_delay_hours` (the departure delay in hours). *Hint: Note you may need to use `mutate()` to make one or more of these variables.*

```{r}
#| label: add-practice-1

# add code here
```

2.  For each airplane (uniquely identified by `tailnum`), use a `group_by()` paired with `summarize()` to find the sample size, mean, and standard deviation of flight distances. Then include only the top 5 and bottom 5 airplanes in terms of mean distance traveled per flight in the final data frame.

```{r}
#| label: add-practice-2

# add code here
```
